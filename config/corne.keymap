/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        rparen {
            bindings = <&kp RPAR>;
            key-positions = <7 8>;
        };

        lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <18 19>;
        };

        rbrace {
            bindings = <&kp RBRC>;
            key-positions = <19 20>;
        };

        lbrack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <30 31>;
        };

        rbrack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <4 5>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <16 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q         &kp W          &kp E        &kp R          &kp T    &kp Y  &kp U      &kp I        &kp O          &kp P            &kp BSPC
&kp LCTRL   &hml LCTRL A  &hml LSHIFT S  &hml LALT D  &kp F          &kp G    &kp H  &kp J      &hmr RALT K  &hmr RSHIFT L  &hmr RCTRL SEMI  &kp SQT
&kp LSHFT   &kp Z         &kp X          &kp C        &kp V          &kp B    &kp N  &kp M      &kp COMMA    &kp DOT        &kp FSLH         &kp ESC
                                         &kp LGUI     &kp BACKSPACE  &mo 1    &mo 2  &kp SPACE  &kp RETURN
            >;
        };

        NumFunc {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LC(Z)  &kp LC(Y)     &kp F1  &kp F2    &kp F3   &kp F4      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PRINTSCREEN  &kp PAUSE_BREAK  &kp SCROLLLOCK
&kp LC(X)  &bt BT_SEL 0  &kp F5  &kp F6    &kp F7   &kp F8      &kp N4        &kp NUMBER_5  &kp NUMBER_6  &kp INSERT       &kp HOME         &kp PAGE_UP
&kp LC(C)  &kp LC(V)     &kp F9  &kp F10   &kp F11  &kp F12     &kp NUMBER_1  &kp N2        &kp NUMBER_3  &kp DEL          &kp END          &kp PAGE_DOWN
                                 &kp LGUI  &trans   &kp BSPC    &mo 3         &kp NUMBER_0  &kp PERIOD
            >;
        };

        Symbolz {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp AMPS    &kp ASTERISK  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp DOLLAR  &kp PERCENT   &kp CARET        &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp EXCL    &kp AT        &kp POUND        &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &mo 3        &kp RET     &trans        &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &tog 4    &tog 0  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Gaming {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E         &kp R      &kp T    &kp Y  &kp U     &kp I          &kp O       &kp P          &kp
&kp LSHIFT  &kp A  &kp S  &kp D         &kp F      &kp G    &kp H  &kp J     &kp K          &kp L       &kp SEMICOLON  &kp
&kp LCTRL   &kp Z  &kp X  &kp C         &kp V      &kp B    &kp N  &kp M     &kp COMMA      &kp PERIOD  &kp SLASH      &kp
                          &kp LEFT_ALT  &kp SPACE  &mo 1    &mo 2  &kp LALT  &kp RIGHT_GUI
            >;
        };
    };
};
